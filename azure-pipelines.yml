trigger:
- '*'

variables:
  major: 1
  minor: $[counter(variables['major'], 10)]
  build: $[counter(variables['minor'], 1000)]
  version: $[format('{0}.{1}.{2}', variables.major, variables.minor, variables.build)]
  isMasterBranch: $[eq(variables['Build.SourceBranchName'], 'master')]

stages:
- stage: UnitTesting
  displayName: 'Run all unit tests.'
  jobs:
  - job: DotnetTesting
    displayName: 'Test the .NET code'
    pool:
      name: 'Windows'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restoring nuget packages'
      inputs:
        command: 'restore'
        projects: '$(Build.SourcesDirectory)/RealLoader.sln'

#     - task: DotNetCoreCLI@2
#       displayName: 'Running dotnet unit tests'
#       inputs:
#         command: 'test'
#         projects: '$(Build.SourcesDirectory)/RealLoader.sln'

- stage: Build
  displayName: 'Build all artifacts for windows and linux'
  jobs:
  # Build for windows
  - job: BuildWindows
    displayName: 'Build on Windows'
    pool:
      name: 'Windows'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 9.x
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: 'Restoring nuget packages'
      inputs:
        command: 'restore'
        projects: '$(Build.SourcesDirectory)/RealLoader.sln'

    - task: MSBuild@1
      displayName: 'Build C++ Windows Solution'
      inputs:
        solution: '$(Build.SourcesDirectory)/Bootstrapping/**/*.vcxproj'
        msbuildArchitecture: 'x64'
        platform: 'x64'
        configuration: 'Release'
        msbuildArguments: '/target:Rebuild'

        # The Installers must be published in this order; 
        # Installer -> GUInstaller
        # RealLoaderFramework.Sdk -> RealLoaderFramework
    - script: |
        dotnet publish $(Build.SourcesDirectory)/Tools/RealLoaderInstaller/RealLoaderInstaller.csproj -p:PublishProfile=Release-Windows -o $(Build.ArtifactStagingDirectory)/RealLoaderInstaller --no-restore
        dotnet publish $(Build.SourcesDirectory)/Tools/RealLoaderGuiInstaller/RealLoaderGuiInstaller.csproj -p:PublishProfile=Release-Windows -o $(Build.ArtifactStagingDirectory)/RealLoaderGuiInstaller --no-restore
        dotnet publish $(Build.SourcesDirectory)/Mods/DotNetSdkBuilderMod/DotNetSdkBuilderMod.csproj -p:PublishProfile=Release -o $(Build.ArtifactStagingDirectory)/DotNetSdkBuilderMod --no-restore
        dotnet publish $(Build.SourcesDirectory)/Framework/RealLoaderFramework.Sdk/RealLoaderFramework.Sdk.csproj -p:PublishProfile=Release -o $(Build.ArtifactStagingDirectory)/RealLoaderFrameworkSdk --no-restore
        dotnet publish $(Build.SourcesDirectory)/Framework/RealLoaderFramework/RealLoaderFramework.csproj -p:PublishProfile=Release -o $(Build.ArtifactStagingDirectory)/RealLoaderFramework --no-restore
      displayName: 'Publish individual .NET projects'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Local Artifact: windows_artifacts'
      condition: eq(variables['isMasterBranch'], true)
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/bin'
        ArtifactName: 'windows_artifacts'
        publishLocation: 'Container'

  # Build for linux
  - job: BuildLinux
    displayName: 'Build on Linux'
    pool:
      name: 'Linux'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      inputs:
        packageType: sdk
        version: 9.x
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: DotNetCoreCLI@2
      displayName: 'Restoring nuget packages'
      inputs:
        command: 'restore'
        projects: '$(Build.SourcesDirectory)/RealLoader.sln'

    - task: CMake@1
      displayName: 'CMake Configure'
      inputs:
        cmakeArgs: '$(Build.SourcesDirectory)'

    - task: CMake@1
      displayName: 'CMake Build'
      inputs:
        cmakeArgs: '--build $(Build.SourcesDirectory)/build'

    - script: |
        dotnet publish $(Build.SourcesDirectory)/Tools/RealLoaderInstaller/RealLoaderInstaller.csproj -p:PublishProfile=Release-Linux -o $(Build.ArtifactStagingDirectory)/RealLoaderInstaller --no-restore
        dotnet publish $(Build.SourcesDirectory)/Tools/RealLoaderGuiInstaller/RealLoaderGuiInstaller.csproj -p:PublishProfile=Release-Linux -o $(Build.ArtifactStagingDirectory)/RealLoaderGuiInstaller --no-restore
        dotnet publish $(Build.SourcesDirectory)/Mods/DotNetSdkBuilderMod/DotNetSdkBuilderMod.csproj -p:PublishProfile=Release -o $(Build.ArtifactStagingDirectory)/DotNetSdkBuilderMod --no-restore
        dotnet publish $(Build.SourcesDirectory)/Framework/RealLoaderFramework.Sdk/RealLoaderFramework.Sdk.csproj -p:PublishProfile=Release -o $(Build.ArtifactStagingDirectory)/RealLoaderFrameworkSdk --no-restore
        dotnet publish $(Build.SourcesDirectory)/Framework/RealLoaderFramework/RealLoaderFramework.csproj -p:PublishProfile=Release -o $(Build.ArtifactStagingDirectory)/RealLoaderFramework --no-restore
      displayName: 'Publish individual .NET projects'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Local Artifact: linux_artifacts'
      condition: eq(variables['isMasterBranch'], true)
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/build/bin'
        ArtifactName: 'linux_artifacts'
        publishLocation: 'Container'



- ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
  - stage: Deploy
    displayName: 'Deploy built artifacts to GitHub'
    dependsOn: Build
    jobs:
    - job: DeployJob
      displayName: 'Deploy Artifacts'
      pool:
        name: 'Linux'
      steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Windows Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'windows_artifacts'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: DownloadBuildArtifacts@0
        displayName: 'Download Linux Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'linux_artifacts'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: ArchiveFiles@2
        displayName: 'Package Framework Files'
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/windows_artifacts/RealLoaderFramework/publish'
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/RealLoaderFramework.zip'

      - task: ArchiveFiles@2
        displayName: 'Package Windows Installer'
        inputs:
          rootFolderOrFile: '$(System.ArtifactsDirectory)/windows_artifacts/bin/RealLoaderGuiInstaller/publish/win-x64/'
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/Win-RealLoaderInstaller.zip'

      - task: ArchiveFiles@2
        displayName: 'Package Windows Artifacts'
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/windows_artifacts/bin/Windows'
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/WindowsArtifacts.zip'

      - task: ArchiveFiles@2
        displayName: 'Package Linux Installer'
        inputs:
          rootFolderOrFile: '$(System.ArtifactsDirectory)/linux_artifacts/bin/RealLoaderGuiInstaller/publish/'
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/Lin-RealLoaderInstaller.zip'

      - task: ArchiveFiles@2
        displayName: 'Package Linux Artifacts'
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/linux_artifacts/bin/Linux'
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/LinuxArtifacts.zip'

      - task: GitHubRelease@1
        displayName: 'Create GitHub Release'
        inputs:
          action: 'create'
          gitHubConnection: 'Realynx'
          repository: 'Realynx/RealLoader'
          tag: 'nightly-build'
          title: 'CI Release $(version)-ci'
          assetUploadMode: 'replace'
          isPreRelease: true
          assets: |
            $(System.ArtifactsDirectory)/Win-RealLoaderInstaller.zip
            $(System.ArtifactsDirectory)/Lin-RealLoaderInstaller.zip
            $(System.ArtifactsDirectory)/RealLoaderFramework.zip
            $(System.ArtifactsDirectory)/WindowsArtifacts.zip
            $(System.ArtifactsDirectory)/LinuxArtifacts.zip
            $(System.ArtifactsDirectory)/windows_artifacts/DotNetSdkBuilderMod/publish/DotNetSdkBuilderMod.dll
            $(System.ArtifactsDirectory)/windows_artifacts/RealLoaderFramework.Sdk/publish/RealLoaderFramework.Sdk.dll
            
