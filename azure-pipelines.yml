trigger:
- '*'

variables:
  isMainBranch: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  isDevBranch: $[eq(variables['Build.SourceBranch'], 'refs/heads/developer')]
  isTestingBranch: $[eq(variables['Build.SourceBranch'], 'refs/heads/testing')]
  isBuildingSymbols: $[or(or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/developer')), eq(variables['Build.SourceBranch'], 'refs/heads/testing'))]
  major: 1
  minor: $[counter(variables['major'], 10)]

stages:
- stage: UnitTesting
  displayName: 'Execute all the unit tests.'
  jobs:
  - job: DotnetTesting
    displayName: 'Test the .NET code'
    pool: 
      name: 'PoofyHost'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restoring nuget packages'
      inputs:
        command: 'restore'
        projects: '$(Build.SourcesDirectory)/PalworldManagedModFramework.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Running dotnet unit tests'
      inputs:
        command: 'test'
        project: '$(Build.SourcesDirectory)/PalworldManagedModFramework.sln'

- ${{ if variables.isBuildingSymbols }}:
  - stage: Build
    displayName: 'Build all artifacts for windows and linux'
    jobs:
    - job: BuildWindows
      displayName: 'Build on Windows'
      condition: or(variables.isMainBranch, variables.isDevBranch)
      pool: 
        name: 'Windows'
      steps:
      - task: MSBuild@1
        displayName: 'Build C++ Windows Solution'
        inputs:
          solution: 'C++WindowsBuild.sln'
          msbuildArchitecture: 'x64'
          platform: 'x64'
          configuration: 'Dist'
          msbuildArguments: '/target:Rebuild'

      - task: MSBuild@1
        displayName: 'Build Palworld Managed Mod Framework Solution'
        inputs:
          solution: '$(Build.SourcesDirectory)/PalworldManagedModFramework.sln'
          msbuildArchitecture: 'x64'
          platform: 'x64'
          configuration: 'Release'
          msbuildArguments: '/target:Rebuild'

    - job: BuildLinux
      displayName: 'Build on Linux'
      condition: or(variables.isMainBranch, variables.isTestingBranch)
      pool: 
        name: 'PoofyHost'
      steps:
      - task: CMake@1
        displayName: 'CMake Configure'
        inputs:
          cmakeArgs: '.'

      - task: CMake@1
        displayName: 'CMake Build'
        inputs:
          cmakeArgs: '--build .'