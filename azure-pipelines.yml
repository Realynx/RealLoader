trigger:
- '*'

variables:
  major: 1
  minor: $[counter(variables['major'], 10)]
  build: $[counter(variables['minor'], 1000)]
  version: $[format('{0}.{1}.{2}', variables.major, variables.minor, variables.build)]

stages:
- stage: UnitTesting
  displayName: 'Run all unit tests.'
  jobs:
  - job: DotnetTesting
    displayName: 'Test the .NET code'
    pool: 
      name: 'PoofyHost'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'Restoring nuget packages'
      inputs:
        command: 'restore'
        projects: '$(Build.SourcesDirectory)/PalworldManagedModFramework.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Running dotnet unit tests'
      inputs:
        command: 'test'
        projects: '$(Build.SourcesDirectory)/PalworldManagedModFramework.sln'

- ${{ if or(or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/developer')), eq(variables['Build.SourceBranch'], 'refs/heads/testing')) }}:
  - stage: Build
    displayName: 'Build all artifacts for windows and linux'
    jobs:
    - job: BuildWindows
      displayName: 'Build on Windows'
      pool: 
        name: 'Windows'
      steps:
      - task: UseDotNet@2
        displayName: 'Use .NET Core sdk'
        inputs:
          packageType: sdk
          version: 8.x
          installationPath: $(Agent.ToolsDirectory)/dotnet

      - task: DotNetCoreCLI@2
        displayName: 'Restoring nuget packages'
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)/PalworldManagedModFramework.sln'
        
      - task: MSBuild@1
        displayName: 'Build C++ Windows Solution'
        inputs:
          solution: '$(Build.SourcesDirectory)/C++WindowsBuild.sln'
          msbuildArchitecture: 'x64'
          platform: 'x64'
          configuration: 'Dist'
          msbuildArguments: '/target:Rebuild'

      - task: MSBuild@1
        displayName: 'Build Palworld Managed Mod Framework Solution'
        inputs:
          solution: '$(Build.SourcesDirectory)/PalworldManagedModFramework.sln'
          msbuildArchitecture: 'x64'
          platform: 'x64'
          configuration: 'Release'
          msbuildArguments: '/target:Rebuild'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)/GithubSymbols'
          ArtifactName: 'windows_artifacts'
          publishLocation: 'Container'

    - job: BuildLinux
      displayName: 'Build on Linux'
      pool: 
        name: 'PoofyHost'
      steps:
      - task: DotNetCoreCLI@2
        displayName: 'Restoring nuget packages'
        inputs:
          command: 'restore'
          projects: '$(Build.SourcesDirectory)/PalworldManagedModFramework.sln'

      - task: CMake@1
        displayName: 'CMake Configure'
        inputs:
          cmakeArgs: '$(Build.SourcesDirectory)'

      - task: CMake@1
        displayName: 'CMake Build'
        inputs:
          cmakeArgs: '--build $(Build.SourcesDirectory)/build'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: drop'
        inputs:
          PathtoPublish: '$(Build.SourcesDirectory)/build'
          ArtifactName: 'linux_artifacts'
          publishLocation: 'Container'

- ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
  - stage: Deploy
    displayName: 'Deploy built artifacts to github'
    dependsOn: Build
    jobs:
    - job: DeployJob
      displayName: 'Deploy Artifacts'
      pool:
        name: 'PoofyHost'
      steps:
      - task: DownloadBuildArtifacts@0
        displayName: 'Download Windows Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'windows_artifacts'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: DownloadBuildArtifacts@0
        displayName: 'Download Linux Artifacts'
        inputs:
          buildType: 'current'
          downloadType: 'single'
          artifactName: 'linux_artifacts'
          downloadPath: '$(System.ArtifactsDirectory)'

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/windows_artifacts/Net/PalWorldManagedModFramework/Release'
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/ManagedModFramework.zip'

      - task: GitHubRelease@1
        displayName: 'Create GitHub Release'
        inputs:
          action: 'create'
          gitHubConnection: 'PoofimafoxPAT'
          repository: 'PoofImaFox/PalworldManagedModFramework'
          tagSource: 'gitTag'
          tagPattern: 'v[0-9]+.[0-9]+.[0-9]+'
          title: 'Release $(version)-ci'
          assets: |
            $(System.ArtifactsDirectory)/ManagedModFramework.zip
            $(System.ArtifactsDirectory)/windows_artifacts/Windows/Bootstrapper.exe
            $(System.ArtifactsDirectory)/windows_artifacts/Windows/CLRHost.dll
            $(System.ArtifactsDirectory)/linux_artifacts/GithubSymbols/Linux/libCLRHost.so
